name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'latest'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-macos:
    needs: create-release
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Extract version info
        id: version_info
        run: |
          if [ "$GITHUB_REF_NAME" = "latest" ]; then
            VERSION=$(node -p "require('./package.json').version")
          else
            # For tags like v0.3.0, strip the "v" prefix to match electron-builder output format
            VERSION=${GITHUB_REF_NAME#v}
          fi
          echo "DMG_VERSION=$VERSION" >> $GITHUB_ENV
          echo "ARM64_DMG_VERSION=${VERSION}-arm64" >> $GITHUB_ENV
        shell: bash

      - name: Build and Package for macOS (both architectures)
        run: npm run package:mac-both
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS Releases to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            ./release/P+55-${{ env.DMG_VERSION }}.dmg
            ./release/P+55-${{ env.ARM64_DMG_VERSION }}.dmg
            ./release/latest-mac.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-windows:
    needs: create-release
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Extract version info
        id: version_info
        run: |
          if [ "$GITHUB_REF_NAME" = "latest" ]; then
            VERSION=$(node -p "require('./package.json').version")
          else
            VERSION=${GITHUB_REF_NAME#v}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Build and Package for Windows
        run: npm run package:win-sqlite
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows Release to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            ./release/P+55 Setup ${{ env.VERSION }}.exe
            ./release/latest.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}